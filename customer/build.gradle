plugins {
    id "org.flywaydb.flyway" version "10.0.0"
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'jacoco'
}

version = '0.0.1'

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.10"
}

ext {
    snippetsDir = file('build/generated')
}

configurations {
    asciidoctorExt
}

dependencies {
    //domain
    implementation(project(":common"))

    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    //임시 db
    implementation 'com.h2database:h2'
    implementation 'mysql:mysql-connector-java:8.0.28'

    //doc
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'

    //flyway
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    //aws s3
    implementation 'software.amazon.awssdk:s3:2.17.123'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.redisson:redisson-spring-boot-starter:3.19.3'

    //spatial
    implementation 'org.hibernate:hibernate-spatial:6.2.2.Final'
    implementation 'org.locationtech.jts:jts-core:1.18.2'

    implementation 'net.bytebuddy:byte-buddy:1.14.16'
    testImplementation 'org.mockito:mockito-core:5.10.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('bootBuildImage') {
    builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()
    jacoco{
        excludes += [
                "**/*Application*",
                "**/exception/**",
                "**/dto/**",
                "**/querydsl/**",
                "**/common/**",
                "**/domain/**",
                "**/member/aws/**",
                "**/member/client/**",
                "**/member/token/**",
                "**/batch/**",
                "*.Q*"
        ]
    }
    finalizedBy jacocoTestReport
}

//jacoco

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.required = true

        xml.destination file("${buildDir}/jacoco/index.xml")
        csv.destination file("${buildDir}/jacoco/index.csv")
        html.destination file("${buildDir}/jacoco/index.html")
    }
    // dependsOn : 이 작업에 지정된 종속성을 추가
    dependsOn test // jacocoTestReport 에 test라는 종속성을 추가
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/common/*",
                            "**/*Application*",
                            "**/exception/**",
                            "**/dto/**",
                            "**/querydsl/*",
                            "**/common/*",
                            "**/domain/*",
                            "**/member/aws/*",
                            "**/member/client/*",
                            "**/member/token/*",
                            "**/batch/**",
                            "*.Q*"
                    ])
                })
        )
    }
    finalizedBy "jacocoTestCoverageVerification"
}


jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"

            // 모든 클래스 각각 라인 커버리지 75% 만족시 빌드 성공
/*            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.75

            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.75

            }*/

            excludes = [
                    "**.common.**",
                    "*.*Application*",
                    "**.exception.**",
                    "**.dto.**",
                    "**.querydsl.**",
                    "**.domain.**",
                    "**.aws.**",
                    "**.client.**",
                    "**.token.**",
                    "**.batch.**",
                    "*.Q*"

            ]
        }
    }
}

